#include<bits/stdc++.h>
using namespace std;

void make_set(char i, vector<int> &parent)
{
  parent[i] = i;
}
int find(vector<int> &parent, int x)
{
  if(x != parent[x])
   parent[x] = find(parent, parent[x]);
  return parent[x];
}
void union_set(vector<int> &parent, int x, int y, vector<int> &rank)
{
  int rootX = find(parent, x);
  int rootY = find(parent, y);
  if(rootX == rootY)
    return;
  if(rank[rootX] > rank[rootY])
    parent[rootY] = rootX;
  else
  {
    parent[rootX] = parent[rootY];
    if(rank[rootX] == rank[rootY])
      rank[rootY]++;
  }
}
bool cmp(pair<pair<char, char>, int> &p1, pair<pair<char, char>, int> &p2)
{
  return p1.second < p2.second;
}
int main()
{
  int v, e;
  cin >> v >> e;
  vector<int> parent(v);
  for(int i = 0; i < v; i++)
    make_set(i, parent);
  vector<int> rank(v);
  vector<pair<char, char>> store;
  // insert according to sort by weight
  vector<pair<pair<char, char>, int>> edges; 
  while(e--)
  {
    char x, y;
    int w;
    cin >> x >> y >> w;
    edges.push_back(make_pair(make_pair(x, y), w));
  }
  cout << "-----------" << endl;
  sort(edges.begin(), edges.end(), cmp);
  for(auto e : edges)
  {
    if(find(parent, e.first.first - 'a') != find(parent, e.first.second - 'a'))
      store.push_back(make_pair(e.first.first, e.first.second));
      union_set(parent, e.first.first - 'a', e.first.second - 'a', rank);
  }
  for(auto v : store)
    cout << v.first << " " << v.second << endl;
  return 0;
}