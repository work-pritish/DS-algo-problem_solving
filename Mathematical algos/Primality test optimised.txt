#include<bits/stdc++.h>
using namespace std;

//o(sqrt(n)) optimised way
bool isPrime(int n)
{
    if(n <= 1)
        return false;
    for(int i = 2; i * i <= n; i++)
    {
        if(n % i == 0)
            return false;
    }
    return true;
}

// for finding range in o(nloglog(n))
// larger global sieve can be used to resolve query problems
void seive(int size)
{
    bool seive_arr[size + 1];
    seive_arr[0] = false;
    seive_arr[1] = false;
    for(int i = 2; i <= size; i++)
        seive_arr[i] = true;
    for(int i = 2; i * i <= size; i++)
    {
        if(seive_arr[i])
        {
            for(int j = i * i; j <= size; j += i)
            {
                if(j % i == 0)
                    seive_arr[j] = false;            
            }
        }
    }
    for(int i = 0; i <= size; i++)
        cout << i << " " << seive_arr[i] << endl;
}
